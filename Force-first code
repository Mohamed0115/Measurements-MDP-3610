#include <LiquidCrystal.h>

// Initialize LCD pins
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

// Define HX711 pins
#define DT_PIN 9
#define SCK_PIN 8

// Constants and variables
#define calibration_factor 100000.0 // Adjust this based on your load cell
unsigned long previousMillis = 0;
const long interval = 100; // Time interval for refreshing the display (in ms)
float force = 0;
long tareValue = 0;  // To store the raw value when no weight is on the scale

// Function declarations
void initializeLCD();
void initializeScale();
void displayGroupName();
void measureAndDisplayForce();
long readHX711();
float getForce();
void tareScale();
void displayForce(float force);
void printToSerial(float force);

void setup() {
  Serial.begin(9600);
  initializeLCD();
  initializeScale();
  displayGroupName();
  tareScale();  // Tare the scale to remove the offset from any initial readings
}

void loop() {
  unsigned long currentMillis = millis();
  
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    
    measureAndDisplayForce();
  }
}

// Function to initialize LCD
void initializeLCD() {
  lcd.begin(16, 2);
}

// Function to initialize HX711 scale pins
void initializeScale() {
  pinMode(SCK_PIN, OUTPUT);
  pinMode(DT_PIN, INPUT);
}

// Function to display group name on LCD
void displayGroupName() {
  lcd.setCursor(0, 0); // Move cursor to the first row
  lcd.print("Linear Scale"); // You can customize this name
}

// Function to read data from HX711
long readHX711() {
  long count = 0;

  // Wait for the DT_PIN to go LOW (data ready)
  while (digitalRead(DT_PIN));

  // Pulse the SCK pin 24 times to read data
  for (int i = 0; i < 24; i++) {
    digitalWrite(SCK_PIN, HIGH);
    count = count << 1;
    digitalWrite(SCK_PIN, LOW);
    if (digitalRead(DT_PIN)) {
      count++;
    }
  }

  // Pulse once more for the gain of 128
  digitalWrite(SCK_PIN, HIGH);
  digitalWrite(SCK_PIN, LOW);

  // Adjust for negative numbers (two's complement)
  count ^= 0x800000;

  return count;
}

// Function to tare (zero out) the scale
void tareScale() {
  tareValue = readHX711();
  Serial.print("Tare value set: ");
  Serial.println(tareValue);
}

// Function to get the force reading from the scale
float getForce() {
  long rawValue = readHX711();
  
  // Subtract the tare value to zero the scale
  long adjustedValue = rawValue - tareValue;
  
  // Linear relation: divide the adjusted raw value by the calibration factor
  return (float)adjustedValue / calibration_factor;
}

// Function to measure and display force
void measureAndDisplayForce() {
  force = getForce();       // Calculate the force
  displayForce(force);      // Show the result on the LCD
  printToSerial(force);     // Print the result to the Serial Monitor
}

// Function to display force on the LCD
void displayForce(float force) {
  lcd.setCursor(0, 1);   // Set the cursor to the second row
  lcd.print("Mass = ");
  lcd.print(force, 2);   // Display the force with two decimal places
  lcd.print(" kg");      // Assuming the force is in kg
}

// Function to print force to the Serial Monitor
void printToSerial(float force) {
  Serial.print("Force: ");
  Serial.print(force, 2);   // Print the force with two decimal places
  Serial.println(" kg");
}
